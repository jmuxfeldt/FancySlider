CLASS:: FancySlider
redirect:: implClass
summary:: An efficient Slider which substitutes a user view for a slider
categories:: GUI>Views
related:: Classes/Slider, Classes/EZFancySlider, Classes/EZSlider

DESCRIPTION::
This should respond just like a slider. See the documentation for Slider. You can also customize the colors of the slider, and you can even customize the draw function. See widgetFunction below. EZFancySlider will Wrapp thsi slider just like and EZSlider.


CLASSMETHODS::

Method:: new
PRIVATE:: key


INSTANCEMETHODS::

METHOD:: widgetFunction
A user definabla function for drawing the widget. You can also add a Function in order to enhance the existing function:
CODE::
(
w=Window.new.front;
v = FancySlider(w, Rect (20,90,300,20)).action_{"test".postln};

v.widgetFunction=v.widgetFunction.addFunc({arg uview; 
	var value_string = v.value.round(0.01).asString;
	var string_x;
	Pen.font = Font("Helvetica",11);
	string_x= (v.value*300).clip(4, 300-26);
	Pen.color = Color.white.alpha_(0.7);
	Pen.addRect(Rect(string_x-1,1,26,12));
	Pen.fill;
	Pen.color = Color.black;
	Pen.stringAtPoint(value_string,Point(string_x,0));
	Pen.stroke;
	
});
)
::
The amount by which the value will changed when -increment or -decrement is called, or when related keys are pressed.
METHOD:: sliderColor
METHOD:: knobColor
METHOD:: frameColor
copymethod:: Slider  -thumbSize
copymethod:: Slider -step
copymethod:: Slider -value
copymethod:: Slider -valueAction


PRIVATE:: init
PRIVATE:: getScale
PRIVATE:: drawwidget
PRIVATE:: mouseDown
PRIVATE:: pixelStep
PRIVATE:: defaultKeyDownAction
PRIVATE:: ctrl_scale
PRIVATE:: orientation
PRIVATE:: increment
PRIVATE:: zoom
PRIVATE:: shift_scale
PRIVATE:: mouseMove

PRIVATE:: decrement
PRIVATE:: q_defaultKeyDownAction

PRIVATE:: alt_scale
PRIVATE:: step
PRIVATE:: thumbSize
PRIVATE:: value
PRIVATE:: valueAction

EXAMPLES::

code::
(
// Show the slider value in a NumberBox
	w = Window.new.front;
	c = NumberBox(w, Rect(20, 20, 150, 20));
	a = Slider(w, Rect(20, 60, 150, 20))
	  .action_({
	    c.value_(a.value)
	    });
	a.action.value;
)

(  // Customize the draw function
	w=Window.new.front;
	v = FancySlider(w, Rect (20,90,300,20)).action_{"test".postln};
	
	v.widgetFunction=v.widgetFunction.addFunc({arg uview; 
		var value_string = v.value.round(0.01).asString;
		var string_x;
		Pen.font = Font("Helvetica",11);
		string_x= (v.value*300).clip(4, 300-26);
		Pen.color = Color.white.alpha_(0.7);
		Pen.addRect(Rect(string_x-1,1,26,12));
		Pen.fill;
		Pen.color = Color.black;
		Pen.stringAtPoint(value_string,Point(string_x,0));
		Pen.stroke;
		
	});
)
::